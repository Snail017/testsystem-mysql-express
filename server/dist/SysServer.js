!function(e){var t={};function s(a){if(t[a])return t[a].exports;var i=t[a]={i:a,l:!1,exports:{}};return e[a].call(i.exports,i,i.exports,s),i.l=!0,i.exports}s.m=e,s.c=t,s.d=function(e,t,a){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(s.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)s.d(a,i,function(t){return e[t]}.bind(null,i));return a},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=9)}([function(e,t,s){const a=s(14);class i{static redisSet(e,t){return new Promise((s,a)=>{global.client.set(Number(e),t,(e,t)=>{e&&a(e),s(t)})})}static redisGet(e){return new Promise((t,s)=>{global.client.get(Number(e),(e,a)=>{e&&s(e),t(a)})})}static async checkToken(e){try{let t=Number(new Date),s=await a.verify(e,global.private_key),n=s.sub;if(s.exp<t){let s=await i.redisGet(e);if((await a.verify(s,global.private_key)).exp<t)return{status:404};{let e=await i.setToken(n,86400),t=await i.setToken(n,60);return i.redisSet(e,e),{status:202,access_token:t,uid:n,msg:"更新token"}}}return{status:200,uid:n,msg:"token有效中"}}catch(e){return{status:404,msg:e}}}static setToken(e,t){var s={iss:"1670644339@qq.com",sub:e,exp:(new Date).getTime()+1e3*t,aud:"1670644339@qq.com",iat:(new Date).getTime()};return a.sign(s,global.private_key)}}e.exports=i},function(e,t,s){const a=s(18),i=s(19);var n=new a(i.mysql.database,i.mysql.user,i.mysql.password,{host:i.mysql.host,dialect:"mysql",operatorsAliases:!1,dialectOptions:{charset:"utf8mb4",supportBigNumbers:!0,bigNumberStrings:!0},pool:{max:5,min:0,acquire:3e4,idle:1e4},timezone:"+08:00"});n.authenticate().then(()=>{console.log("Connection has been established successfully.")}).catch(e=>{console.error("Unable to connect to the database:",e)}),e.exports={sequelize:n}},function(e,t,s){const a=s(1).sequelize.import("../schema/question.js");a.sync({force:!1});e.exports=class{static async createQues(e){let{problem:t,analysis:s,note:i,sort:n,score:o,questionType:r,exam_id:c,answer:u}=e;return await a.create({problem:t,analysis:s,note:i,score:o,sort:n,questionType:r,exam_id:c,answer:u})}static async alterQues(e){let{problem:t,analysis:s,note:i,sort:n,score:o,questionType:r,exam_id:c,answer:u,question_id:d}=e;return await a.update({problem:t,analysis:s,note:i,score:o,sort:n,questionType:r,exam_id:c,answer:u},{where:{id:d}}),!0}static async selectQues(e){return await a.findAll({where:{exam_id:e},order:[["sort","ASC"]]})}static async delQues(e){let{id:t}=e;return await a.destroy({where:{id:t}}),!0}static async delQuesByExamid(e){return await a.destroy({where:{exam_id:e}}),!0}}},function(e,t,s){const a=s(1).sequelize.import("../schema/option.js");a.sync({force:!1});e.exports=class{static async createOption(e){let{question_id:t,exam_id:s,text:i,answer:n,sort:o,img:r,introduce:c}=e;return await a.create({question_id:t,exam_id:s,text:i,answer:n,sort:o,img:r,introduce:c.editorTxt,isUrl:Number(c.isUrl)})}static async alterOption(e){let{option_id:t,question_id:s,exam_id:i,text:n,answer:o,sort:r,img:c,introduce:u}=e;return await a.update({text:n,answer:String(o),sort:r,img:c,introduce:u.editorTxt,isUrl:Number(u.isUrl)},{where:{question_id:s,id:t,exam_id:i}}),!0}static async findAllOption(e){let{id:t}=e;return await a.findAll({where:{question_id:t}})}static async deleteOption(e){let{option_id:t}=e;return await a.destroy({where:{id:t}}),!0}static async deleteOptionByQuesid(e){return await a.destroy({where:{question_id:e}}),!0}static async deleteOptionByExamid(e){return await a.destroy({where:{exam_id:e}}),!0}}},function(e,t){e.exports=class{static async checkData(e,t){let s=[];for(let t in e)if(void 0===e[t]){let e=s.length+1;s.push("错误"+e+": 参数: "+t+"不能为空")}return!(s.length>0&&(t.status=412,t.json({code:412,msg:s}),1))}}},function(e,t,s){const a=s(1).sequelize,i=a.import("../schema/exam.js"),n=a.Op;i.sync({force:!1});e.exports=class{static async createExam(e){let{title:t,user_id:s,explain:a,testtime:n,status:o,sort:r,designated:c}=e;return await i.create({title:t,user_id:s,explain:a,testtime:n,status:o,sort:r,designated:c})}static async alterExam(e){let{title:t,user_id:s,explain:a,testtime:n,status:o,sort:r,designated:c,exam_id:u}=e;return await i.update({title:t,user_id:s,explain:a,testtime:n,status:o,sort:r,designated:c},{where:{id:u}}),!0}static async getlist(e){let{user_id:t,status:s,title:a,page:o,pagecount:r}=e;return await i.findAll({where:{userid:t,status:-1==s?{[n.lt]:3}:s,[n.or]:{title:{[n.like]:"%"+a+"%"},id:{[n.like]:"%"+a+"%"}}},offset:(Number(r)-1)*o,limit:Number(o),order:[["id","DESC"]]})}static async findExam(e){let{exam_id:t}=e;return await i.findAll({where:{id:t}})}static async deleteExam(e){return await i.destroy({where:{id:e}}),!0}static async changeStatus(e){let{user_id:t,exam_id:s,status:a}=e;return await i.update({status:a},{where:{userid:t,id:s}})}}},function(e,t){e.exports=require("fs")},function(e,t){e.exports=require("path")},function(e,t){e.exports=require("express")},function(e,t,s){const a=s(6),i=(s(7),s(10)),n=s(11),o=s(12),r=s(8),c=(s(13),s(0)),u=r();global.public_key=a.readFileSync(__dirname+"/key/pub.key").toString(),global.private_key=a.readFileSync(__dirname+"/key/pri.key").toString(),u.use(n()),u.use(i.json());const d=s(15);u.all("*",async(e,t,s)=>{if(t.header("Access-Control-Expose-Headers","Authorization"),t.header("Cache-Control","no-store"),"/publicKey"!=e.path&&"/captcha"!=e.path&&"/login"!=e.path&&"/register"!=e.path){const a=await c.checkToken(e.headers.authorization);try{404==a.status?t.json({code:401,msg:"token已过期，请重新登录"}):(202==a.status&&t.header("Authorization",a.access_token),s())}catch(e){t.json({code:500,msg:e})}}else s()}),u.use("/",d),global.client=o.createClient(6379,"127.0.0.1"),global.client.on("error",function(e){console.log("redis Error "+e)}),global.client.on("connect",function(){global.client.set("private_key",global.private_key,o.print),global.client.set("public_key",global.private_key,o.print)}),global.client.on("ready",function(e,t){console.log("redis success.....")}),u.listen(3e3,"localhost",function(e,t){e&&console.log(e),console.log("success listen at port:3000......")})},function(e,t){e.exports=require("body-parser")},function(e,t){e.exports=require("cookie-parser")},function(e,t){e.exports=require("redis")},function(e,t){e.exports=require("webpack-dev-middleware")},function(e,t){e.exports=require("jsonwebtoken")},function(e,t,s){const a=s(8),i=s(16),n=s(22),o=s(24),r=s(26),c=s(27),u=s(28),d=a.Router();d.post("/register",i.create),d.post("/login",i.login),d.post("/users",i.list),d.get("/captcha",i.code),d.get("/publicKey",i.public_key),d.post("/Uploadpic",u.single("img"),i.uploadImg),d.post("/ExamTitle",n.create),d.post("/questions",r.create),d.patch("/questions",r.patchQues),d.get("/questionnaireList",n.getlist),d.get("/questions",r.getQuestions),d.delete("/questions",r.deletequestion),d.delete("/option",c.deleteOption),d.patch("/Exam",n.patchExam),d.delete("/Exam",n.deleteExam),d.get("/answerList",o.answerList),e.exports=d},function(e,t,s){const a=s(17),i=s(20),n=s(21),o=s(0);e.exports=class{static async create(e,t){let s={Nickname:e.body.name,Password:e.body.password},i=[];for(let e in s)if(void 0===s[e]){let t=i.length+1;i.push("错误"+t+": 参数: "+e+"不能为空")}if(i.length>0)return t.status=412,t.json({code:412,msg:i}),!1;if(await a.Nickname(s.Nickname))t.status=403,t.json({code:403,msg:"用户已经存在"});else try{s.Password=n.privateDecrypt(global.private_key,Buffer.from(s.Password,"base64")).toString();const e=await a.create(s),i=o.setToken(e.id,36e3),r=o.setToken(e.id,1296e3);o.redisSet(i,r),t.status=200,t.json({code:200,msg:"创建用户成功"})}catch(e){t.status=500,t.json({code:500,msg:e})}}static async login(e,t){let s={Nickname:e.body.name,Password:e.body.password},i=[];for(let e in s)if(void 0===s[e]){let t=i.length+1;i.push("错误"+t+": 参数: "+e+"不能为空")}if(i.length>0)return t.status=412,t.json({code:412,msg:i}),!1;s.Password=n.privateDecrypt(global.private_key,Buffer.from(s.Password,"base64"));const r=await a.Password(s.Nickname,s.Password);if(r)try{const e=o.setToken(r.id,60),s=o.setToken(r.id,1296e3);o.redisSet(e,s),t.status=200,t.json({code:200,msg:"用户登录成功",data:{access_token:e,user_id:r.id}})}catch(e){t.status=500,t.json({code:500,msg:e})}else t.json({code:404,msg:"用户名或密码错误"})}static async code(e,t){var s=i.create({inverse:!1,fontSize:36,noise:2,width:80,height:30});e.session=s.text.toLowerCase(),t.cookie("captcha",e.session),t.json({code:200,img:s.data,msg:e.session})}static async public_key(e,t){t.json({code:200,msg:global.public_key})}static async list(e,t){let s=e.body,i=[];for(let e in s)if(void 0===s[e]){let t=i.length+1;i.push("错误"+t+": 参数: "+e+"不能为空")}if(i.length>0)return t.status=412,t.json({code:412,msg:i}),!1;const n=await a.findAllUserList(s.type);if(n)try{t.json({code:200,data:n})}catch(e){t.json({code:500,msg:e})}}static uploadImg(e,t,s){t.json({code:200,data:{img:"http://zq.img.com/"+e.file.filename}})}}},function(e,t,s){const a=s(1).sequelize.import("../schema/user.js");a.sync({force:!1});e.exports=class{static async create(e){let{Nickname:t,Password:s}=e;return await a.create({Nickname:t,Password:s})}static async delete(e){return await a.destroy({where:{id:e}}),!0}static async findAllUserList(e){return Number(e)?await a.findAll({attributes:["id","Nickname"],where:{type:e}}):await a.findAll({attributes:["id","Nickname"]})}static async Nickname(e){return await a.findOne({where:{Nickname:e}})}static async Password(e,t){return await a.findOne({where:{Nickname:e,Password:t}})}}},function(e,t){e.exports=require("sequelize")},function(e,t){e.exports={mysql:{host:"95.169.20.53",user:"root",password:"Zq@574839",database:"zqq",port:"3306"}}},function(e,t){e.exports=require("svg-captcha")},function(e,t){e.exports=require("crypto")},function(e,t,s){const a=s(5),i=s(2),n=s(3),o=(s(23),s(4)),r=s(0);e.exports=class{static async create(e,t){let s=e.body,i=await r.checkToken(e.headers.authorization);if(s.user_id=i.uid,!await o.checkData(s,t))return!1;try{if(0==s.exam_id){const e=await a.createExam(s);e&&(t.status=200,t.json({code:200,data:{id:e.id},msg:"提交成功！"}))}else await a.alterExam(s)&&(t.status=200,t.json({code:200,data:{id:s.exam_id},msg:"修改成功"}))}catch(e){return t.status=412,t.json({code:412,msg:e}),!1}}static async getlist(e,t){let s=e.query,i=await r.checkToken(e.headers.authorization);if(s.user_id=i.uid,!await o.checkData(s,t))return!1;const n=await a.getlist(s);try{t.status=200,t.json({code:200,data:{users:n,data_total:"2",p:"1",page_rows:"10",page_total:1}})}catch(e){return t.status=412,t.json({code:412,msg:e}),!1}}static async patchExam(e,t){let s=e.body,i=await r.checkToken(e.headers.authorization);if(s.user_id=i.uid,!await o.checkData(s,t))return!1;try{await a.changeStatus(s),t.status=200,t.json({code:200,msg:"状态修改成功"})}catch(e){return t.status=412,t.json({code:500,msg:e}),!1}}static async deleteExam(e,t){let s=e.body;if(!await o.checkData(s,t))return!1;try{await n.deleteOptionByExamid(s.exam_id),await i.delQuesByExamid(s.exam_id),await a.deleteExam(s.exam_id),t.status=200,t.json({code:200,msg:"问卷删除成功"})}catch(e){t.status=412,t.json({code:500,data:e})}}}},function(e,t,s){const a=s(1).sequelize,i=a.import("../schema/user_exam.js");a.Op;i.sync({force:!1});e.exports=class{static async create(e){let{user_id:t,exam_id:s,status:a}=e;return i.create({user_id:t,exam_id:s,status:a})}static async getExam(e){let{status:t,userid:s}=e;return i.findAll({where:{userid:s,status:-1==t?">0":t}})}static async getUser(e){return i.findAll({where:{examid:examid}})}}},function(e,t,s){const a=s(25),i=(s(2),s(3),s(4)),n=s(0);e.exports=class{static async answerList(e,t){let s=e.query,o=await n.checkToken(e.headers.authorization);if(s.user_id=o.uid,!await i.checkData(s))return!1;try{await a.answerList(s)}catch(e){return t.status=412,t.json({code:500,msg:e}),!1}}}},function(e,t,s){const a=s(1).sequelize.import("../schema/answer.js");a.sync({force:!1});e.exports=class{static async answerList(e){let{user_id:t,exam_id:s,content:i}=e;return a.findAll({where:{examid:s,id:i,or:[{userid:i},{userid:t}]}})}}},function(e,t,s){const a=s(5),i=s(2),n=s(3),o=s(4),r=s(0);e.exports=class{static async deletequestion(e,t){let s=e.body;if(!await o.checkData(s,t))return!1;try{await n.deleteOptionByQuesid(s.id),await i.delQues(s),t.status=200,t.json({code:200,msg:"题目删除成功"})}catch(e){t.status=500,t.json({code:500,data:e})}}static async create(e,t){let s=e.body;if(!o.checkData(s,t))return!1;try{const e=await i.createQues(s);if(e){if(0!=s.questionType)for(let t in s.optiondata){let a=s.optiondata[t];a.exam_id=s.exam_id,a.question_id=e.id,await n.createOption(a)}t.status=200,t.json({code:200,msg:"上传成功"})}}catch(e){return t.status=412,t.json({code:500,msg:e}),!1}}static async patchQues(e,t){let s=e.body;if(!o.checkData(s,t))return!1;try{const e=await i.alterQues(s);if(0!=s.questionType)for(let e in s.optiondata)if(s.optiondata[e].question_id=s.question_id,s.optiondata[e].exam_id=s.exam_id,0==s.optiondata[e].option_id){if(!await n.createOption(s.optiondata[e]))return t.status=500,t.json({code:500,msg:"题目上传错误"}),!1}else if(!await n.alterOption(s.optiondata[e]))return t.status=500,t.json({code:500,msg:"题目上传错误"}),!1;e&&(t.status=200,t.json({code:200}))}catch(e){t.status=412,t.json({code:500,msg:e})}}static async getQuestions(e,t){let s=e.query,c=await r.checkToken(e.headers.authorization);if(s.user_id=c.uid,!await o.checkData(s,t))return!1;const u=await a.findExam(s),d=await i.selectQues(s.exam_id);try{if(u){let e=u[0].dataValues,s=[],a=[];for(let e in d)s.push(d[e].dataValues),a=await n.findAllOption(d[e].dataValues),s[e].optiondata=a,s[e].question_id=d[e].dataValues.id;e.list=s,t.status=200,t.json({code:200,data:e})}}catch(e){return t.status=500,t.json({code:500,data:e}),!1}}}},function(e,t,s){s(5),s(2);const a=s(3),i=s(4);s(0);e.exports=class{static async deleteOption(e,t){let s=e.body;if(!await i.checkData(s,t))return!1;try{await a.deleteOption(s)&&(t.status=200,t.json({code:200,msg:"选项删除成功"}))}catch(e){t.status=500,t.json({code:500,msg:e})}}}},function(e,t,s){const a=s(29),i=s(7),n=s(6);!function(e){try{n.accessSync(e)}catch(t){n.mkdirSync(e)}}("../UserPic/");var o=a.diskStorage({destination:function(e,t,s){s(null,"../UserPic/")},filename:function(e,t,s){var a=i.extname(t.originalname);s(null,t.fieldname+"-"+Date.now()+a)}}),r=a({storage:o});e.exports=r},function(e,t){e.exports=require("multer")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,